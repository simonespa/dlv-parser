/* Generated By:JavaCC: Do not edit this line. ParserDLVTokenManager.java */
package parser;

public class ParserDLVTokenManager implements ParserDLVConstants {
	public static java.io.PrintStream debugStream = System.out;

	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x6000000L) != 0L)
				return 20;
			if ((active0 & 0x100L) != 0L) {
				jjmatchedKind = 28;
				return 9;
			}
			if ((active0 & 0x80L) != 0L)
				return 9;
			return -1;
		case 1:
			if ((active0 & 0x4000000L) != 0L)
				return 30;
			if ((active0 & 0x100L) != 0L) {
				jjmatchedKind = 28;
				jjmatchedPos = 1;
				return 9;
			}
			return -1;
		case 2:
			if ((active0 & 0x4000000L) != 0L)
				return 32;
			if ((active0 & 0x100L) != 0L)
				return 9;
			return -1;
		case 3:
			if ((active0 & 0x4000000L) != 0L) {
				jjmatchedKind = 27;
				jjmatchedPos = 3;
				return -1;
			}
			return -1;
		case 4:
			if ((active0 & 0x4000000L) != 0L) {
				if (jjmatchedPos < 3) {
					jjmatchedKind = 27;
					jjmatchedPos = 3;
				}
				return -1;
			}
			return -1;
		case 5:
			if ((active0 & 0x4000000L) != 0L) {
				if (jjmatchedPos < 3) {
					jjmatchedKind = 27;
					jjmatchedPos = 3;
				}
				return -1;
			}
			return -1;
		default:
			return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	static private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 33:
			return jjMoveStringLiteralDfa1_0(0x200L);
		case 35:
			return jjMoveStringLiteralDfa1_0(0x6000000L);
		case 40:
			return jjStopAtPos(0, 18);
		case 41:
			return jjStopAtPos(0, 19);
		case 44:
			return jjStopAtPos(0, 6);
		case 45:
			return jjStopAtPos(0, 13);
		case 46:
			return jjStopAtPos(0, 17);
		case 58:
			jjmatchedKind = 16;
			return jjMoveStringLiteralDfa1_0(0xc000L);
		case 61:
			return jjStopAtPos(0, 11);
		case 91:
			return jjStopAtPos(0, 20);
		case 93:
			return jjStopAtPos(0, 21);
		case 95:
			return jjStopAtPos(0, 24);
		case 110:
			return jjMoveStringLiteralDfa1_0(0x100L);
		case 118:
			return jjStartNfaWithStates_0(0, 7, 9);
		case 123:
			return jjStopAtPos(0, 22);
		case 125:
			return jjStopAtPos(0, 23);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	static private final int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 45:
			if ((active0 & 0x4000L) != 0L)
				return jjStopAtPos(1, 14);
			break;
		case 61:
			if ((active0 & 0x200L) != 0L)
				return jjStopAtPos(1, 9);
			break;
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
		case 109:
			return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x100L);
		case 126:
			if ((active0 & 0x8000L) != 0L)
				return jjStopAtPos(1, 15);
			break;
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	static private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
		case 116:
			if ((active0 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(2, 8, 9);
			break;
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	static private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 116:
			if ((active0 & 0x2000000L) != 0L)
				return jjStopAtPos(3, 25);
			break;
		case 120:
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	static private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	static private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 110:
			return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	static private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 116:
			if ((active0 & 0x4000000L) != 0L)
				return jjStopAtPos(6, 26);
			break;
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	static private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	static private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	static private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };

	static private final int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 35;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 29)
								kind = 29;
							jjCheckNAdd(12);
						} else if ((0xc0000000000L & l) != 0L) {
							if (kind > 12)
								kind = 12;
						} else if ((0x5000000000000000L & l) != 0L) {
							if (kind > 10)
								kind = 10;
						} else if (curChar == 35)
							jjAddStates(0, 4);
						else if (curChar == 48) {
							if (kind > 29)
								kind = 29;
						} else if (curChar == 37)
							jjCheckNAddTwoStates(1, 2);
						if (curChar == 62)
							jjCheckNAdd(4);
						else if (curChar == 60)
							jjCheckNAdd(4);
						break;
					case 1:
						if ((0xfffffffffffffbffL & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 2:
						if (curChar == 10)
							kind = 5;
						break;
					case 3:
						if ((0x5000000000000000L & l) != 0L && kind > 10)
							kind = 10;
						break;
					case 4:
						if (curChar == 61 && kind > 10)
							kind = 10;
						break;
					case 5:
						if (curChar == 60)
							jjCheckNAdd(4);
						break;
					case 6:
						if (curChar == 62)
							jjCheckNAdd(4);
						break;
					case 7:
						if ((0xc0000000000L & l) != 0L && kind > 12)
							kind = 12;
						break;
					case 9:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 28)
							kind = 28;
						jjstateSet[jjnewStateCnt++] = 9;
						break;
					case 10:
						if (curChar == 48 && kind > 29)
							kind = 29;
						break;
					case 11:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAdd(12);
						break;
					case 12:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAdd(12);
						break;
					case 14:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 30)
							kind = 30;
						jjstateSet[jjnewStateCnt++] = 14;
						break;
					case 15:
						if (curChar == 35)
							jjAddStates(0, 4);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 30:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 32;
						else if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 29;
						break;
					case 0:
						if ((0x7fffffeL & l) != 0L) {
							if (kind > 30)
								kind = 30;
							jjCheckNAdd(14);
						} else if ((0x7fffffe00000000L & l) != 0L) {
							if (kind > 28)
								kind = 28;
							jjCheckNAdd(9);
						}
						break;
					case 20:
						if (curChar == 109)
							jjstateSet[jjnewStateCnt++] = 33;
						else if (curChar == 116)
							jjstateSet[jjnewStateCnt++] = 27;
						else if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 22;
						else if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 19;
						if (curChar == 109)
							jjstateSet[jjnewStateCnt++] = 30;
						break;
					case 1:
						jjAddStates(5, 6);
						break;
					case 8:
						if ((0x7fffffe00000000L & l) == 0L)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAdd(9);
						break;
					case 9:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAdd(9);
						break;
					case 13:
						if ((0x7fffffeL & l) == 0L)
							break;
						if (kind > 30)
							kind = 30;
						jjCheckNAdd(14);
						break;
					case 14:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 30)
							kind = 30;
						jjCheckNAdd(14);
						break;
					case 16:
						if (curChar == 116 && kind > 27)
							kind = 27;
						break;
					case 17:
						if (curChar == 110)
							jjstateSet[jjnewStateCnt++] = 16;
						break;
					case 18:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 17;
						break;
					case 19:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 18;
						break;
					case 21:
						if (curChar == 109 && kind > 27)
							kind = 27;
						break;
					case 22:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 21;
						break;
					case 23:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 22;
						break;
					case 24:
						if (curChar == 115 && kind > 27)
							kind = 27;
						break;
					case 25:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 24;
						break;
					case 26:
						if (curChar == 109)
							jjstateSet[jjnewStateCnt++] = 25;
						break;
					case 27:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 26;
						break;
					case 28:
						if (curChar == 116)
							jjstateSet[jjnewStateCnt++] = 27;
						break;
					case 29:
						if (curChar == 110 && kind > 27)
							kind = 27;
						break;
					case 31:
						if (curChar == 109)
							jjstateSet[jjnewStateCnt++] = 30;
						break;
					case 32:
						if (curChar == 120 && kind > 27)
							kind = 27;
						break;
					case 33:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 32;
						break;
					case 34:
						if (curChar == 109)
							jjstateSet[jjnewStateCnt++] = 33;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 1:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(5, 6);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 35 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 20, 23, 28, 31, 34, 1, 2, };
	public static final String[] jjstrLiteralImages = { "", null, null, null,
			null, null, "\54", "\166", "\156\157\164", "\41\75", null, "\75",
			null, "\55", "\72\55", "\72\176", "\72", "\56", "\50", "\51",
			"\133", "\135", "\173", "\175", "\137", "\43\151\156\164",
			"\43\155\141\170\151\156\164", null, null, null, null, };
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x7fffffc1L, };
	static final long[] jjtoSkip = { 0x3eL, };
	static protected SimpleCharStream input_stream;
	static private final int[] jjrounds = new int[35];
	static private final int[] jjstateSet = new int[70];
	static protected char curChar;

	public ParserDLVTokenManager(SimpleCharStream stream) {
		if (input_stream != null)
			throw new TokenMgrError(
					"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
					TokenMgrError.STATIC_LEXER_ERROR);
		input_stream = stream;
	}

	public ParserDLVTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 35; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	static public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	static protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;

	public static Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line,
					error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

}
