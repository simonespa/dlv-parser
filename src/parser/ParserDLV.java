/* Generated By:JavaCC: Do not edit this line. ParserDLV.java */
package parser;

import gui.Editor;

public class ParserDLV implements ParserDLVConstants {

	public static void main(String[] args) throws ParseException {
		Editor gui = new Editor();
	}

	static final public void dlp() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case MINUS:
		case STRONG:
		case WEAK:
		case CONSTANT:
			rule();
			dlp();
			break;
		case MAXINT:
			maxint();
			dlp();
			break;
		case 0:
			jj_consume_token(0);
			break;
		default:
			jj_la1[0] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void rule() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case MINUS:
		case CONSTANT:
			headIfBody();
			break;
		case STRONG:
			strongConstraint();
			break;
		case WEAK:
			weakConstraint();
			break;
		default:
			jj_la1[1] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void maxint() throws ParseException {
		jj_consume_token(MAXINT);
		jj_consume_token(EQUAL);
		jj_consume_token(NUMBER);
		jj_consume_token(DOT);
	}

	static final public void headIfBody() throws ParseException {
		head();
		headIfBody_1();
	}

	static final public void headIfBody_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case DOT:
			jj_consume_token(DOT);
			break;
		case OR:
			jj_consume_token(OR);
			headIfBody();
			break;
		case STRONG:
			jj_consume_token(STRONG);
			body();
			headIfBody_2();
			break;
		default:
			jj_la1[2] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void headIfBody_2() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case DOT:
			jj_consume_token(DOT);
			break;
		case AND:
			jj_consume_token(AND);
			body();
			headIfBody_2();
			break;
		default:
			jj_la1[3] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void strongConstraint() throws ParseException {
		jj_consume_token(STRONG);
		body();
		strongConstraint_1();
	}

	static final public void strongConstraint_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case DOT:
			jj_consume_token(DOT);
			break;
		case AND:
			jj_consume_token(AND);
			body();
			strongConstraint_1();
			break;
		default:
			jj_la1[4] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void weakConstraint() throws ParseException {
		jj_consume_token(WEAK);
		body();
		weakConstraint_1();
	}

	static final public void weakConstraint_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case DOT:
			jj_consume_token(DOT);
			weakConstraint_2();
			break;
		case AND:
			jj_consume_token(AND);
			body();
			weakConstraint_1();
			break;
		default:
			jj_la1[5] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void weakConstraint_2() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case OSB:
			weightLevel();
			break;
		default:
			jj_la1[6] = jj_gen;
			;
		}
	}

	static final public void weightLevel() throws ParseException {
		jj_consume_token(OSB);
		weightLevel_1();
	}

	static final public void weightLevel_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NUMBER:
		case VARIABLE:
			x();
			jj_consume_token(COLON);
			weightLevel_2();
			break;
		case COLON:
			jj_consume_token(COLON);
			x();
			jj_consume_token(CSB);
			break;
		default:
			jj_la1[7] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void weightLevel_2() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NUMBER:
		case VARIABLE:
			x();
			jj_consume_token(CSB);
			break;
		case CSB:
			jj_consume_token(CSB);
			break;
		default:
			jj_la1[8] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void x() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case VARIABLE:
			jj_consume_token(VARIABLE);
			break;
		case NUMBER:
			jj_consume_token(NUMBER);
			break;
		default:
			jj_la1[9] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void head() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case CONSTANT:
			atom();
			break;
		case MINUS:
			jj_consume_token(MINUS);
			atom();
			break;
		default:
			jj_la1[10] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case MINUS:
			jj_consume_token(MINUS);
			atom();
			break;
		case INT:
			jj_consume_token(INT);
			jj_consume_token(ORB);
			jj_consume_token(VARIABLE);
			jj_consume_token(CRB);
			break;
		case VARIABLE:
			jj_consume_token(VARIABLE);
			body_1();
			break;
		case CONSTANT:
			jj_consume_token(CONSTANT);
			body_2();
			break;
		case NUMBER:
			jj_consume_token(NUMBER);
			body_3();
			break;
		case FUNCTION_NAME:
			aggregateFunction();
			body_4();
			break;
		case NOT:
			jj_consume_token(NOT);
			body_5();
			break;
		default:
			jj_la1[11] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case COMPARISON:
			jj_consume_token(COMPARISON);
			body_A();
			break;
		case EQUAL:
			jj_consume_token(EQUAL);
			body_1_2();
			break;
		case NOT_EQUAL:
			jj_consume_token(NOT_EQUAL);
			body_C();
			break;
		default:
			jj_la1[12] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_1_2() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case VARIABLE:
			jj_consume_token(VARIABLE);
			body_B();
			break;
		case CONSTANT:
			jj_consume_token(CONSTANT);
			body_B();
			break;
		case NUMBER:
			jj_consume_token(NUMBER);
			body_B();
			break;
		case FUNCTION_NAME:
			aggregateFunction();
			break;
		default:
			jj_la1[13] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_2() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case COMPARISON:
			jj_consume_token(COMPARISON);
			body_C();
			break;
		case EQUAL:
			jj_consume_token(EQUAL);
			body_C();
			break;
		case NOT_EQUAL:
			jj_consume_token(NOT_EQUAL);
			body_C();
			break;
		default:
			jj_la1[14] = jj_gen;
			atom_1();
		}
	}

	static final public void body_3() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case COMPARISON:
			jj_consume_token(COMPARISON);
			body_A();
			break;
		case EQUAL:
			jj_consume_token(EQUAL);
			body_A();
			break;
		case NOT_EQUAL:
			jj_consume_token(NOT_EQUAL);
			body_C();
			break;
		default:
			jj_la1[15] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_4() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case COMPARISON:
			jj_consume_token(COMPARISON);
			body_D();
			break;
		case EQUAL:
			jj_consume_token(EQUAL);
			body_D();
			break;
		default:
			jj_la1[16] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_5() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case FUNCTION_NAME:
			aggregateFunction();
			body_5_1();
			break;
		case CONSTANT:
			atom();
			break;
		default:
			jj_la1[17] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_5_1() throws ParseException {
		jj_consume_token(EQUAL);
		body_D();
	}

	static final public void body_A() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case VARIABLE:
			jj_consume_token(VARIABLE);
			break;
		case CONSTANT:
			jj_consume_token(CONSTANT);
			break;
		case NUMBER:
			jj_consume_token(NUMBER);
			break;
		case FUNCTION_NAME:
			aggregateFunction();
			break;
		default:
			jj_la1[18] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_B() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case OPERATOR:
			jj_consume_token(OPERATOR);
			body_C();
			break;
		default:
			jj_la1[19] = jj_gen;
			;
		}
	}

	static final public void body_C() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case VARIABLE:
			jj_consume_token(VARIABLE);
			break;
		case CONSTANT:
			jj_consume_token(CONSTANT);
			break;
		case NUMBER:
			jj_consume_token(NUMBER);
			break;
		default:
			jj_la1[20] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void body_D() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case VARIABLE:
			jj_consume_token(VARIABLE);
			break;
		case NUMBER:
			jj_consume_token(NUMBER);
			break;
		default:
			jj_la1[21] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void atom() throws ParseException {
		jj_consume_token(CONSTANT);
		atom_1();
	}

	static final public void atom_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case ORB:
			jj_consume_token(ORB);
			terms();
			jj_consume_token(CRB);
			break;
		default:
			jj_la1[22] = jj_gen;
			;
		}
	}

	static final public void terms() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case VARIABLE:
			jj_consume_token(VARIABLE);
			terms_1();
			break;
		case CONSTANT:
			jj_consume_token(CONSTANT);
			terms_1();
			break;
		case UNKNOWN:
			jj_consume_token(UNKNOWN);
			terms_1();
			break;
		case NUMBER:
			jj_consume_token(NUMBER);
			terms_1();
			break;
		default:
			jj_la1[23] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void terms_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case AND:
			jj_consume_token(AND);
			terms();
			break;
		default:
			jj_la1[24] = jj_gen;
			;
		}
	}

	static final public void aggregateFunction() throws ParseException {
		jj_consume_token(FUNCTION_NAME);
		symbolicSet();
	}

	static final public void symbolicSet() throws ParseException {
		jj_consume_token(OBB);
		vars();
		jj_consume_token(COLON);
		conj();
		jj_consume_token(CBB);
	}

	static final public void vars() throws ParseException {
		jj_consume_token(VARIABLE);
		vars_1();
	}

	static final public void vars_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case AND:
			jj_consume_token(AND);
			vars();
			break;
		default:
			jj_la1[25] = jj_gen;
			;
		}
	}

	static final public void conj() throws ParseException {
		atom();
		conj_1();
	}

	static final public void conj_1() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case AND:
			jj_consume_token(AND);
			conj();
			break;
		default:
			jj_la1[26] = jj_gen;
			;
		}
	}

	static private boolean jj_initialized_once = false;
	static public ParserDLVTokenManager token_source;
	static SimpleCharStream jj_input_stream;
	static public Token token, jj_nt;
	static private int jj_ntk;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[27];
	static private int[] jj_la1_0;
	static {
		jj_la1_0();
	}

	private static void jj_la1_0() {
		jj_la1_0 = new int[] { 0x1400e001, 0x1000e000, 0x24080, 0x20040,
				0x20040, 0x20040, 0x100000, 0x60010000, 0x60200000, 0x60000000,
				0x10002000, 0x7a002100, 0xe00, 0x78000000, 0xe00, 0xe00, 0xc00,
				0x18000000, 0x78000000, 0x1000, 0x70000000, 0x60000000,
				0x40000, 0x71000000, 0x40, 0x40, 0x40, };
	}

	public ParserDLV(java.io.InputStream stream) {
		this(stream, null);
	}

	public ParserDLV(java.io.InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out
					.println("ERROR: Second call to constructor of static parser.  ");
			System.out
					.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ParserDLVTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
	}

	static public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	static public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
	}

	public ParserDLV(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ParserDLVTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
	}

	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
	}

	public ParserDLV(ParserDLVTokenManager tm) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(ParserDLVTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
	}

	static final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	static final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	static final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	static private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
	static private int[] jj_expentry;
	static private int jj_kind = -1;

	static public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[31];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 27; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 31; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	static final public void enable_tracing() {
	}

	static final public void disable_tracing() {
	}

}
